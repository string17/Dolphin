// This file was automatically generated by the NPoco T4 Template
// Do not make changes dNewstly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `DolphinConPoco`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=.\SQLEXPRESS; User ID =sa; password=**zapped**;`
//     Schema:                 ``
//     Include Views:          `True`

using System;
using System.Collections.Generic;
using System.Linq;
using NPoco;

namespace DolphinContext.Data.Models
{
	public partial class DolServiceDb : Database
	{
		public DolServiceDb() : base("DolphinConPoco")
		{
			CommonConstruct();
		}

		public DolServiceDb(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		public virtual void CommonConstruct()
		{
		    Factory = new DefaultFactory();
		}
		
		public interface IFactory
		{
			DolServiceDb GetInstance();
		    void BeginTransaction(DolServiceDb database);
		    void CompleteTransaction(DolServiceDb database);
		}

        public class DefaultFactory : IFactory
        {
            [ThreadStatic]
            static Stack<DolServiceDb> _stack = new Stack<DolServiceDb>();

            public DolServiceDb GetInstance()
            {
               
			    if (_stack == null)
                { return new  DolServiceDb(); }
                else { 
					return _stack.Count > 0 ? _stack.Peek() : new DolServiceDb();
                }
			   
			    
            }

            public void BeginTransaction(DolServiceDb database)
            {

			 if (_stack == null)
				 {
				  _stack = new  Stack<DolServiceDb>();
				 }
                _stack.Push(database);
            }

            public void CompleteTransaction(DolServiceDb database)
            {
			 if (_stack == null)
				 {
				  _stack = new Stack <DolServiceDb>();
				 }
                _stack.Pop();
            }
        }
		
		public static IFactory Factory { get; set; }

        public static DolServiceDb GetInstance()
        {
		 if (Factory == null)
                return new DolServiceDb();
			return Factory.GetInstance();
        }

		protected override void OnBeginTransaction()
		{
            Factory.BeginTransaction(this);
		}

        protected override void OnCompleteTransaction()
		{
            Factory.CompleteTransaction(this);
		}
		public class Record<T> where T:new()
		{
			public bool IsNew(Database db) { return db.IsNew(this); }
			public object Insert(Database db) { return db.Insert(this); }  
			
			public int Update(Database db, IEnumerable<string> columns) { return db.Update(this, columns); }
			public static int Update(Database db, string sql, params object[] args) { return db.Update<T>(sql, args); }
			public static int Update(Database db, Sql sql) { return db.Update<T>(sql); }
			public int Delete(Database db) { return db.Delete(this); }
			public static int Delete(Database db, string sql, params object[] args) { return db.Delete<T>(sql, args); }
			public static int Delete(Database db, Sql sql) { return db.Delete<T>(sql); }
			public static int Delete(Database db, object primaryKey) { return db.Delete<T>(primaryKey); }
			public static bool Exists(Database db, object primaryKey) { return db.Exists<T>(primaryKey); }
			public static T SingleOrDefault(Database db, string sql, params object[] args) { return db.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Database db, Sql sql) { return db.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(Database db, string sql, params object[] args) { return db.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Database db, Sql sql) { return db.FirstOrDefault<T>(sql); }
			public static T Single(Database db, string sql, params object[] args) { return db.Single<T>(sql, args); }
			public static T Single(Database db, Sql sql) { return db.Single<T>(sql); }
			public static T First(Database db, string sql, params object[] args) { return db.First<T>(sql, args); }
			public static T First(Database db, Sql sql) { return db.First<T>(sql); }
			public static List<T> Fetch(Database db, string sql, params object[] args) { return db.Fetch<T>(sql, args); }
			public static List<T> Fetch(Database db, Sql sql) { return db.Fetch<T>(sql); }
			public static List<T> Fetch(Database db, long page, long itemsPerPage, string sql, params object[] args) { return db.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(Database db, long page, long itemsPerPage, Sql sql) { return db.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(Database db, long skip, long take, string sql, params object[] args) { return db.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(Database db, long skip, long take, Sql sql) { return db.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(Database db, long page, long itemsPerPage, string sql, params object[] args) { return db.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(Database db, long page, long itemsPerPage, Sql sql) { return db.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(Database db, string sql, params object[] args) { return db.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Database db, Sql sql) { return db.Query<T>(sql); }			
			
			protected HashSet<string> Tracker = new HashSet<string>();
			private void OnLoaded() { Tracker.Clear(); }
			protected void Track(string c) { if (!Tracker.Contains(c)) Tracker.Add(c); }

			public int Update(Database db) 
			{ 
				if (Tracker.Count == 0)
					return db.Update(this); 

				var retv = db.Update(this, Tracker.ToArray());
				Tracker.Clear();
				return retv;
			}
			public void Save(Database db) 
			{
                if (this.IsNew(db))
					Insert(db);
				else
					Update(db);
			}		
		}	
	}		
		[TableName("dbo.DolCompany")]
		[PrimaryKey("CustomerId")]
		[ExplicitColumns]
		public partial class DolCompany : DolServiceDb.Record<DolCompany>  
		{
	        [Column] public int CustomerId 
			{ 
				get { return _CustomerId; }
				set { _CustomerId = value; Track("CustomerId"); }
			}
			int _CustomerId;
	        [Column] public string CustomerName 
			{ 
				get { return _CustomerName; }
				set { _CustomerName = value; Track("CustomerName"); }
			}
			string _CustomerName;
	        [Column] public string CustomerAlias 
			{ 
				get { return _CustomerAlias; }
				set { _CustomerAlias = value; Track("CustomerAlias"); }
			}
			string _CustomerAlias;
	        [Column] public string CustomerBanner 
			{ 
				get { return _CustomerBanner; }
				set { _CustomerBanner = value; Track("CustomerBanner"); }
			}
			string _CustomerBanner;
	        [Column] public string CustomerRespTime 
			{ 
				get { return _CustomerRespTime; }
				set { _CustomerRespTime = value; Track("CustomerRespTime"); }
			}
			string _CustomerRespTime;
	        [Column] public string CustomerRestTime 
			{ 
				get { return _CustomerRestTime; }
				set { _CustomerRestTime = value; Track("CustomerRestTime"); }
			}
			string _CustomerRestTime;
	        [Column] public string CustomerRest1Time 
			{ 
				get { return _CustomerRest1Time; }
				set { _CustomerRest1Time = value; Track("CustomerRest1Time"); }
			}
			string _CustomerRest1Time;
	        [Column] public bool? CustomerStatus 
			{ 
				get { return _CustomerStatus; }
				set { _CustomerStatus = value; Track("CustomerStatus"); }
			}
			bool? _CustomerStatus;
	        [Column] public DateTime? CreatedOn 
			{ 
				get { return _CreatedOn; }
				set { _CreatedOn = value; Track("CreatedOn"); }
			}
			DateTime? _CreatedOn;
		
			public static IEnumerable<DolCompany> Query(Database db, string[] columns = null, int[] CustomerId = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolCompany (NOLOCK)");

				if (CustomerId != null)
					sql.Where("CustomerId IN (@0)", CustomerId);

                return db.Query<DolCompany>(sql);
            }
		}
		
		[TableName("dbo.DolIncident")]
		[PrimaryKey("IncidentId")]
		[ExplicitColumns]
		public partial class DolIncident : DolServiceDb.Record<DolIncident>  
		{
	        [Column] public int IncidentId 
			{ 
				get { return _IncidentId; }
				set { _IncidentId = value; Track("IncidentId"); }
			}
			int _IncidentId;
	        [Column] public string IncidentRef 
			{ 
				get { return _IncidentRef; }
				set { _IncidentRef = value; Track("IncidentRef"); }
			}
			string _IncidentRef;
	        [Column] public string TerminalId 
			{ 
				get { return _TerminalId; }
				set { _TerminalId = value; Track("TerminalId"); }
			}
			string _TerminalId;
	        [Column] public string UserName 
			{ 
				get { return _UserName; }
				set { _UserName = value; Track("UserName"); }
			}
			string _UserName;
	        [Column] public string IncidentDesc 
			{ 
				get { return _IncidentDesc; }
				set { _IncidentDesc = value; Track("IncidentDesc"); }
			}
			string _IncidentDesc;
	        [Column] public DateTime? ResponseDateTime 
			{ 
				get { return _ResponseDateTime; }
				set { _ResponseDateTime = value; Track("ResponseDateTime"); }
			}
			DateTime? _ResponseDateTime;
	        [Column] public DateTime? IncidentDateTime 
			{ 
				get { return _IncidentDateTime; }
				set { _IncidentDateTime = value; Track("IncidentDateTime"); }
			}
			DateTime? _IncidentDateTime;
	        [Column] public string IncidentStatus 
			{ 
				get { return _IncidentStatus; }
				set { _IncidentStatus = value; Track("IncidentStatus"); }
			}
			string _IncidentStatus;
		
			public static IEnumerable<DolIncident> Query(Database db, string[] columns = null, int[] IncidentId = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolIncident (NOLOCK)");

				if (IncidentId != null)
					sql.Where("IncidentId IN (@0)", IncidentId);

                return db.Query<DolIncident>(sql);
            }
		}
		
		[TableName("dbo.DolAssigned")]
		[PrimaryKey("CallId")]
		[ExplicitColumns]
		public partial class DolAssigned : DolServiceDb.Record<DolAssigned>  
		{
	        [Column] public int CallId 
			{ 
				get { return _CallId; }
				set { _CallId = value; Track("CallId"); }
			}
			int _CallId;
	        [Column] public string IncidentRef 
			{ 
				get { return _IncidentRef; }
				set { _IncidentRef = value; Track("IncidentRef"); }
			}
			string _IncidentRef;
	        [Column] public string CallAssigned 
			{ 
				get { return _CallAssigned; }
				set { _CallAssigned = value; Track("CallAssigned"); }
			}
			string _CallAssigned;
	        [Column] public string TerminalId 
			{ 
				get { return _TerminalId; }
				set { _TerminalId = value; Track("TerminalId"); }
			}
			string _TerminalId;
	        [Column] public string EngAssigned 
			{ 
				get { return _EngAssigned; }
				set { _EngAssigned = value; Track("EngAssigned"); }
			}
			string _EngAssigned;
	        [Column] public string EngResolved 
			{ 
				get { return _EngResolved; }
				set { _EngResolved = value; Track("EngResolved"); }
			}
			string _EngResolved;
	        [Column] public string CallStatus 
			{ 
				get { return _CallStatus; }
				set { _CallStatus = value; Track("CallStatus"); }
			}
			string _CallStatus;
	        [Column] public string PartUsed 
			{ 
				get { return _PartUsed; }
				set { _PartUsed = value; Track("PartUsed"); }
			}
			string _PartUsed;
	        [Column] public string PerformanceMs 
			{ 
				get { return _PerformanceMs; }
				set { _PerformanceMs = value; Track("PerformanceMs"); }
			}
			string _PerformanceMs;
	        [Column] public DateTime? DateResolved 
			{ 
				get { return _DateResolved; }
				set { _DateResolved = value; Track("DateResolved"); }
			}
			DateTime? _DateResolved;
	        [Column] public DateTime? TimeResolved 
			{ 
				get { return _TimeResolved; }
				set { _TimeResolved = value; Track("TimeResolved"); }
			}
			DateTime? _TimeResolved;
		
			public static IEnumerable<DolAssigned> Query(Database db, string[] columns = null, int[] CallId = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolAssigned (NOLOCK)");

				if (CallId != null)
					sql.Where("CallId IN (@0)", CallId);

                return db.Query<DolAssigned>(sql);
            }
		}
		
		[TableName("dbo.DolRole")]
		[PrimaryKey("RoleId")]
		[ExplicitColumns]
		public partial class DolRole : DolServiceDb.Record<DolRole>  
		{
	        [Column] public int RoleId 
			{ 
				get { return _RoleId; }
				set { _RoleId = value; Track("RoleId"); }
			}
			int _RoleId;
	        [Column] public string RoleName 
			{ 
				get { return _RoleName; }
				set { _RoleName = value; Track("RoleName"); }
			}
			string _RoleName;
	        [Column] public string RoleDesc 
			{ 
				get { return _RoleDesc; }
				set { _RoleDesc = value; Track("RoleDesc"); }
			}
			string _RoleDesc;
	        [Column] public bool? RoleStatus 
			{ 
				get { return _RoleStatus; }
				set { _RoleStatus = value; Track("RoleStatus"); }
			}
			bool? _RoleStatus;
		
			public static IEnumerable<DolRole> Query(Database db, string[] columns = null, int[] RoleId = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolRole (NOLOCK)");

				if (RoleId != null)
					sql.Where("RoleId IN (@0)", RoleId);

                return db.Query<DolRole>(sql);
            }
		}
		
		[TableName("dbo.DolItem")]
		[PrimaryKey("ItemId")]
		[ExplicitColumns]
		public partial class DolItem : DolServiceDb.Record<DolItem>  
		{
	        [Column] public int ItemId 
			{ 
				get { return _ItemId; }
				set { _ItemId = value; Track("ItemId"); }
			}
			int _ItemId;
	        [Column] public string ItemName 
			{ 
				get { return _ItemName; }
				set { _ItemName = value; Track("ItemName"); }
			}
			string _ItemName;
	        [Column] public string ItemDesc 
			{ 
				get { return _ItemDesc; }
				set { _ItemDesc = value; Track("ItemDesc"); }
			}
			string _ItemDesc;
	        [Column] public bool? ItemStatus 
			{ 
				get { return _ItemStatus; }
				set { _ItemStatus = value; Track("ItemStatus"); }
			}
			bool? _ItemStatus;
		
			public static IEnumerable<DolItem> Query(Database db, string[] columns = null, int[] ItemId = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolItem (NOLOCK)");

				if (ItemId != null)
					sql.Where("ItemId IN (@0)", ItemId);

                return db.Query<DolItem>(sql);
            }
		}
		
		[TableName("dbo.DolRole_Menu")]
		[PrimaryKey("Id")]
		[ExplicitColumns]
		public partial class DolRoleMenu : DolServiceDb.Record<DolRoleMenu>  
		{
	        [Column] public int Id 
			{ 
				get { return _Id; }
				set { _Id = value; Track("Id"); }
			}
			int _Id;
	        [Column] public int? RoleId 
			{ 
				get { return _RoleId; }
				set { _RoleId = value; Track("RoleId"); }
			}
			int? _RoleId;
	        [Column] public int? MenuId 
			{ 
				get { return _MenuId; }
				set { _MenuId = value; Track("MenuId"); }
			}
			int? _MenuId;
	        [Column] public string MapDesc 
			{ 
				get { return _MapDesc; }
				set { _MapDesc = value; Track("MapDesc"); }
			}
			string _MapDesc;
		
			public static IEnumerable<DolRoleMenu> Query(Database db, string[] columns = null, int[] Id = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolRole_Menu (NOLOCK)");

				if (Id != null)
					sql.Where("Id IN (@0)", Id);

                return db.Query<DolRoleMenu>(sql);
            }
		}
		
		[TableName("dbo.DolUser")]
		[PrimaryKey("UserId")]
		[ExplicitColumns]
		public partial class DolUser : DolServiceDb.Record<DolUser>  
		{
	        [Column] public int UserId 
			{ 
				get { return _UserId; }
				set { _UserId = value; Track("UserId"); }
			}
			int _UserId;
	        [Column] public string FirstName 
			{ 
				get { return _FirstName; }
				set { _FirstName = value; Track("FirstName"); }
			}
			string _FirstName;
	        [Column] public string MiddleName 
			{ 
				get { return _MiddleName; }
				set { _MiddleName = value; Track("MiddleName"); }
			}
			string _MiddleName;
	        [Column] public string LastName 
			{ 
				get { return _LastName; }
				set { _LastName = value; Track("LastName"); }
			}
			string _LastName;
	        [Column] public string UserName 
			{ 
				get { return _UserName; }
				set { _UserName = value; Track("UserName"); }
			}
			string _UserName;
	        [Column] public string UserPWD 
			{ 
				get { return _UserPWD; }
				set { _UserPWD = value; Track("UserPWD"); }
			}
			string _UserPWD;
	        [Column] public string PhoneNos 
			{ 
				get { return _PhoneNos; }
				set { _PhoneNos = value; Track("PhoneNos"); }
			}
			string _PhoneNos;
	        [Column] public string UserImg 
			{ 
				get { return _UserImg; }
				set { _UserImg = value; Track("UserImg"); }
			}
			string _UserImg;
	        [Column] public int? CustomerId 
			{ 
				get { return _CustomerId; }
				set { _CustomerId = value; Track("CustomerId"); }
			}
			int? _CustomerId;
	        [Column] public int? RoleId 
			{ 
				get { return _RoleId; }
				set { _RoleId = value; Track("RoleId"); }
			}
			int? _RoleId;
	        [Column] public bool? UserStatus 
			{ 
				get { return _UserStatus; }
				set { _UserStatus = value; Track("UserStatus"); }
			}
			bool? _UserStatus;
	        [Column] public string CreatedBy 
			{ 
				get { return _CreatedBy; }
				set { _CreatedBy = value; Track("CreatedBy"); }
			}
			string _CreatedBy;
	        [Column] public DateTime? CreatedOn 
			{ 
				get { return _CreatedOn; }
				set { _CreatedOn = value; Track("CreatedOn"); }
			}
			DateTime? _CreatedOn;
	        [Column] public string ModifiedBy 
			{ 
				get { return _ModifiedBy; }
				set { _ModifiedBy = value; Track("ModifiedBy"); }
			}
			string _ModifiedBy;
	        [Column] public DateTime? ModifiedOn 
			{ 
				get { return _ModifiedOn; }
				set { _ModifiedOn = value; Track("ModifiedOn"); }
			}
			DateTime? _ModifiedOn;
		
			public static IEnumerable<DolUser> Query(Database db, string[] columns = null, int[] UserId = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolUser (NOLOCK)");

				if (UserId != null)
					sql.Where("UserId IN (@0)", UserId);

                return db.Query<DolUser>(sql);
            }
		}
		
		[TableName("dbo.DolBrand")]
		[PrimaryKey("BrandId")]
		[ExplicitColumns]
		public partial class DolBrand : DolServiceDb.Record<DolBrand>  
		{
	        [Column] public int BrandId 
			{ 
				get { return _BrandId; }
				set { _BrandId = value; Track("BrandId"); }
			}
			int _BrandId;
	        [Column] public string BrandName 
			{ 
				get { return _BrandName; }
				set { _BrandName = value; Track("BrandName"); }
			}
			string _BrandName;
	        [Column] public string BrandDesc 
			{ 
				get { return _BrandDesc; }
				set { _BrandDesc = value; Track("BrandDesc"); }
			}
			string _BrandDesc;
		
			public static IEnumerable<DolBrand> Query(Database db, string[] columns = null, int[] BrandId = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolBrand (NOLOCK)");

				if (BrandId != null)
					sql.Where("BrandId IN (@0)", BrandId);

                return db.Query<DolBrand>(sql);
            }
		}
		
		[TableName("dbo.AuditTrail")]
		[PrimaryKey("Id")]
		[ExplicitColumns]
		public partial class AuditTrail : DolServiceDb.Record<AuditTrail>  
		{
	        [Column] public int Id 
			{ 
				get { return _Id; }
				set { _Id = value; Track("Id"); }
			}
			int _Id;
	        [Column] public string UserName 
			{ 
				get { return _UserName; }
				set { _UserName = value; Track("UserName"); }
			}
			string _UserName;
	        [Column] public string UserActivity 
			{ 
				get { return _UserActivity; }
				set { _UserActivity = value; Track("UserActivity"); }
			}
			string _UserActivity;
	        [Column] public string Comments 
			{ 
				get { return _Comments; }
				set { _Comments = value; Track("Comments"); }
			}
			string _Comments;
	        [Column] public DateTime? DateLog 
			{ 
				get { return _DateLog; }
				set { _DateLog = value; Track("DateLog"); }
			}
			DateTime? _DateLog;
	        [Column] public string SystemName 
			{ 
				get { return _SystemName; }
				set { _SystemName = value; Track("SystemName"); }
			}
			string _SystemName;
	        [Column] public string SystemIP 
			{ 
				get { return _SystemIP; }
				set { _SystemIP = value; Track("SystemIP"); }
			}
			string _SystemIP;
		
			public static IEnumerable<AuditTrail> Query(Database db, string[] columns = null, int[] Id = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.AuditTrail (NOLOCK)");

				if (Id != null)
					sql.Where("Id IN (@0)", Id);

                return db.Query<AuditTrail>(sql);
            }
		}
		
		[TableName("dbo.DolMenu")]
		[PrimaryKey("MenuId")]
		[ExplicitColumns]
		public partial class DolMenu : DolServiceDb.Record<DolMenu>  
		{
	        [Column] public int MenuId 
			{ 
				get { return _MenuId; }
				set { _MenuId = value; Track("MenuId"); }
			}
			int _MenuId;
	        [Column] public string MenuName 
			{ 
				get { return _MenuName; }
				set { _MenuName = value; Track("MenuName"); }
			}
			string _MenuName;
	        [Column] public string MenuURL 
			{ 
				get { return _MenuURL; }
				set { _MenuURL = value; Track("MenuURL"); }
			}
			string _MenuURL;
	        [Column] public string MenuDesc 
			{ 
				get { return _MenuDesc; }
				set { _MenuDesc = value; Track("MenuDesc"); }
			}
			string _MenuDesc;
	        [Column] public int? ParentId 
			{ 
				get { return _ParentId; }
				set { _ParentId = value; Track("ParentId"); }
			}
			int? _ParentId;
	        [Column] public int? Sequence 
			{ 
				get { return _Sequence; }
				set { _Sequence = value; Track("Sequence"); }
			}
			int? _Sequence;
	        [Column] public string ExternalURL 
			{ 
				get { return _ExternalURL; }
				set { _ExternalURL = value; Track("ExternalURL"); }
			}
			string _ExternalURL;
	        [Column] public bool? MenuStatus 
			{ 
				get { return _MenuStatus; }
				set { _MenuStatus = value; Track("MenuStatus"); }
			}
			bool? _MenuStatus;
	        [Column] public string LinkIcon 
			{ 
				get { return _LinkIcon; }
				set { _LinkIcon = value; Track("LinkIcon"); }
			}
			string _LinkIcon;
		
			public static IEnumerable<DolMenu> Query(Database db, string[] columns = null, int[] MenuId = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolMenu (NOLOCK)");

				if (MenuId != null)
					sql.Where("MenuId IN (@0)", MenuId);

                return db.Query<DolMenu>(sql);
            }
		}
		
		[TableName("dbo.DolRegion")]
		[PrimaryKey("RegId")]
		[ExplicitColumns]
		public partial class DolRegion : DolServiceDb.Record<DolRegion>  
		{
	        [Column] public int RegId 
			{ 
				get { return _RegId; }
				set { _RegId = value; Track("RegId"); }
			}
			int _RegId;
	        [Column] public string RegionName 
			{ 
				get { return _RegionName; }
				set { _RegionName = value; Track("RegionName"); }
			}
			string _RegionName;
		
			public static IEnumerable<DolRegion> Query(Database db, string[] columns = null, int[] RegId = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolRegion (NOLOCK)");

				if (RegId != null)
					sql.Where("RegId IN (@0)", RegId);

                return db.Query<DolRegion>(sql);
            }
		}
		
		[TableName("dbo.DolState")]
		[PrimaryKey("Sid")]
		[ExplicitColumns]
		public partial class DolState : DolServiceDb.Record<DolState>  
		{
	        [Column] public int Sid 
			{ 
				get { return _Sid; }
				set { _Sid = value; Track("Sid"); }
			}
			int _Sid;
	        [Column] public string StateName 
			{ 
				get { return _StateName; }
				set { _StateName = value; Track("StateName"); }
			}
			string _StateName;
		
			public static IEnumerable<DolState> Query(Database db, string[] columns = null, int[] Sid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolState (NOLOCK)");

				if (Sid != null)
					sql.Where("Sid IN (@0)", Sid);

                return db.Query<DolState>(sql);
            }
		}
		
		[TableName("dbo.DolTerminal")]
		[PrimaryKey("Tid")]
		[ExplicitColumns]
		public partial class DolTerminal : DolServiceDb.Record<DolTerminal>  
		{
	        [Column] public int Tid 
			{ 
				get { return _Tid; }
				set { _Tid = value; Track("Tid"); }
			}
			int _Tid;
	        [Column] public string CustomerName 
			{ 
				get { return _CustomerName; }
				set { _CustomerName = value; Track("CustomerName"); }
			}
			string _CustomerName;
	        [Column] public string TerminalId 
			{ 
				get { return _TerminalId; }
				set { _TerminalId = value; Track("TerminalId"); }
			}
			string _TerminalId;
	        [Column] public string TSNum 
			{ 
				get { return _TSNum; }
				set { _TSNum = value; Track("TSNum"); }
			}
			string _TSNum;
	        [Column] public string TerminalRef 
			{ 
				get { return _TerminalRef; }
				set { _TerminalRef = value; Track("TerminalRef"); }
			}
			string _TerminalRef;
	        [Column] public string BrandName 
			{ 
				get { return _BrandName; }
				set { _BrandName = value; Track("BrandName"); }
			}
			string _BrandName;
	        [Column] public string TLocation 
			{ 
				get { return _TLocation; }
				set { _TLocation = value; Track("TLocation"); }
			}
			string _TLocation;
	        [Column] public string TState 
			{ 
				get { return _TState; }
				set { _TState = value; Track("TState"); }
			}
			string _TState;
	        [Column] public string TAlias 
			{ 
				get { return _TAlias; }
				set { _TAlias = value; Track("TAlias"); }
			}
			string _TAlias;
	        [Column] public string RegionName 
			{ 
				get { return _RegionName; }
				set { _RegionName = value; Track("RegionName"); }
			}
			string _RegionName;
	        [Column] public string TEng 
			{ 
				get { return _TEng; }
				set { _TEng = value; Track("TEng"); }
			}
			string _TEng;
	        [Column] public bool? TerminalStatus 
			{ 
				get { return _TerminalStatus; }
				set { _TerminalStatus = value; Track("TerminalStatus"); }
			}
			bool? _TerminalStatus;
	        [Column] public string CreatedBy 
			{ 
				get { return _CreatedBy; }
				set { _CreatedBy = value; Track("CreatedBy"); }
			}
			string _CreatedBy;
	        [Column] public DateTime? CreatedOn 
			{ 
				get { return _CreatedOn; }
				set { _CreatedOn = value; Track("CreatedOn"); }
			}
			DateTime? _CreatedOn;
	        [Column] public string ModifiedBy 
			{ 
				get { return _ModifiedBy; }
				set { _ModifiedBy = value; Track("ModifiedBy"); }
			}
			string _ModifiedBy;
	        [Column] public DateTime? ModifiedOn 
			{ 
				get { return _ModifiedOn; }
				set { _ModifiedOn = value; Track("ModifiedOn"); }
			}
			DateTime? _ModifiedOn;
		
			public static IEnumerable<DolTerminal> Query(Database db, string[] columns = null, int[] Tid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolTerminal (NOLOCK)");

				if (Tid != null)
					sql.Where("Tid IN (@0)", Tid);

                return db.Query<DolTerminal>(sql);
            }
		}
}